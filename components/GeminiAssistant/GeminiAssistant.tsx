"use client";

import React, { useState, useEffect, useRef } from "react";
import {
  GeminiAIService,
  AIResponse,
  UserContext,
} from "@/services/gemini-ai.service";
import useAuthStore from "@/lib/store/authStore";
import axiosInstance from "@/lib/axios";
import styles from "./GeminiAssistant.module.css";
import { RiAiGenerate, RiAddLine, RiCloseLine } from "react-icons/ri";

const GEMINI_API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY || "";

interface DiaryEntry {
  _id?: string;
  title: string;
  description: string;
  emotions: string[];
  date: string;
}

interface Task {
  _id?: string;
  name: string;
  date: string;
  isDone: boolean;
}

interface WeekInfo {
  curWeekToPregnant: number;
  daysBeforePregnant: number;
  babyToday: {
    babySize: number;
    babyWeight: number;
    babyActivity: string;
    babyDevelopment: string;
    image: string;
  };
  momHint: string;
}

export const GeminiAssistant: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<AIResponse[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [userInput, setUserInput] = useState("");
  const [activeTab, setActiveTab] = useState<
    "chat" | "insights" | "reminders" | "diary" | "tasks"
  >("chat");
  const [isInitialized, setIsInitialized] = useState(false);

  // Diary form state
  const [showDiaryForm, setShowDiaryForm] = useState(false);
  const [diaryForm, setDiaryForm] = useState({
    title: "",
    description: "",
    emotions: [] as string[],
  });

  // Task form state
  const [showTaskForm, setShowTaskForm] = useState(false);
  const [taskForm, setTaskForm] = useState({
    name: "",
    date: new Date().toISOString().split("T")[0],
  });

  // User data
  const [weekInfo, setWeekInfo] = useState<WeekInfo | null>(null);
  const [emotions, setEmotions] = useState<
    Array<{ _id: string; name: string }>
  >([]);

  const geminiService = useRef<GeminiAIService | null>(null);
  const user = useAuthStore((state) => state.user);
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (!geminiService.current && GEMINI_API_KEY) {
      geminiService.current = new GeminiAIService(GEMINI_API_KEY);
      setIsInitialized(true);
    }
  }, []);

  useEffect(() => {
    if (geminiService.current) {
      if (user && isAuthenticated) {
        fetchUserContext();
        fetchWeekInfo();
        fetchEmotions();
      } else {
        geminiService.current.updateUserContext(null);
        if (isInitialized && messages.length === 0) {
          generateWelcomeMessage();
        }
      }
    }
  }, [user, isAuthenticated, isInitialized]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const fetchWeekInfo = async () => {
    try {
      const response = await axiosInstance.get("/weeks/greeting");
      setWeekInfo(response.data);
    } catch (error) {
      console.log("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–∏–∂–¥–µ–Ω—å:", error);
    }
  };

  const fetchEmotions = async () => {
    try {
      const response = await axiosInstance.get("/emotions?limit=100");
      setEmotions(response.data.emotions || []);
    } catch (error) {
      console.log("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –µ–º–æ—Ü—ñ–π:", error);
    }
  };

  const fetchUserContext = async () => {
    if (!user || !geminiService.current) return;

    try {
      const context: UserContext = {
        userId: user.id,
        name: user.name,
        email: user.email,
        dueDate: user.dueDate,
        babyGender: user.babyGender as "boy" | "girl" | "unknown",
      };

      try {
        const [emotionsRes, tasksRes, diaryRes] = await Promise.all([
          axiosInstance
            .get("/emotions?limit=20")
            .catch(() => ({ data: { emotions: [] } })),
          axiosInstance
            .get("/tasks?limit=10")
            .catch(() => ({ data: { tasks: [] } })),
          axiosInstance
            .get("/diary?limit=10")
            .catch(() => ({ data: { tasks: [] } })),
        ]);

        context.emotions = emotionsRes.data.emotions || [];
        context.tasks = tasksRes.data.tasks || [];
        context.diaryEntries = diaryRes.data.tasks || [];
      } catch (error) {
        console.log("–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –ø—Ä–∞—Ü—é—î–º–æ –∑ –±–∞–∑–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º");
      }

      geminiService.current.updateUserContext(context);

      if (messages.length === 0) {
        generateWelcomeMessage();
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:", error);
    }
  };

  const generateWelcomeMessage = async () => {
    if (!geminiService.current) return;

    setIsLoading(true);
    try {
      let welcomeContent = "";

      if (isAuthenticated && weekInfo) {
        welcomeContent = `–ü—Ä–∏–≤—ñ—Ç, ${user?.name || "–º–∞–º–æ"}! 

–¢–∏ –Ω–∞ ${weekInfo.curWeekToPregnant} —Ç–∏–∂–Ω—ñ –≤–∞–≥—ñ—Ç–Ω–æ—Å—Ç—ñ ü§±
–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –º–∞–ª—é–∫–æ–º –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${weekInfo.daysBeforePregnant} –¥–Ω—ñ–≤!

${weekInfo.momHint}

–Ø–∫ —Å–ø—Ä–∞–≤–∏? –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?`;
      } else {
        welcomeContent = isAuthenticated
          ? `–ü—Ä–∏–≤—ñ—Ç, ${user?.name || "–º–∞–π–±—É—Ç–Ω—è –º–∞–º–æ"}! 

–Ø —Ç–≤—ñ–π AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –ø–∏—Ç–∞–Ω—å –≤–∞–≥—ñ—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞. –°—Ç–∞–≤—Ç–µ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è!`
          : "–ü—Ä–∏–≤—ñ—Ç! –Ø AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –ø–∏—Ç–∞–Ω—å –≤–∞–≥—ñ—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞. –°—Ç–∞–≤—Ç–µ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å, –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É –¥–æ –ø–æ–ª–æ–≥—ñ–≤ –∞–±–æ –¥–æ–≥–ª—è–¥ –∑–∞ –º–∞–ª—é–∫–æ–º!";
      }

      setMessages([
        {
          content: welcomeContent,
          suggestions: [
            "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –≤–∞–≥—ñ—Ç–Ω–æ—Å—Ç—ñ",
            "–Ø–∫—ñ –≤—ñ—Ç–∞–º—ñ–Ω–∏ –≤–∞–∂–ª–∏–≤—ñ?",
            "–Ø–∫ –≤–ø–æ—Ä–∞—Ç–∏—Å—è –∑ —Ç–æ–∫—Å–∏–∫–æ–∑–æ–º?",
          ],
          timestamp: new Date(),
          type: "general",
        },
      ]);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendMessage = async () => {
    if (!userInput.trim() || !geminiService.current) return;

    setIsLoading(true);
    try {
      const response = await geminiService.current.freeConversation(userInput);
      setMessages((prev) => [...prev, response]);
      setUserInput("");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", error);
      setMessages((prev) => [
        ...prev,
        {
          content:
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è.",
          timestamp: new Date(),
          type: "general",
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateDiaryEntry = async () => {
    if (!diaryForm.title.trim() || !diaryForm.description.trim()) return;

    try {
      await axiosInstance.post("/diary", {
        title: diaryForm.title,
        description: diaryForm.description,
        emotions: diaryForm.emotions,
      });

      setShowDiaryForm(false);
      setDiaryForm({ title: "", description: "", emotions: [] });

      setMessages((prev) => [
        ...prev,
        {
          content: `‚úÖ –ó–∞–ø–∏—Å "${diaryForm.title}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞!`,
          timestamp: new Date(),
          type: "general",
        },
      ]);

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      fetchUserContext();
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:", error);
      setMessages((prev) => [
        ...prev,
        {
          content: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ —â–æ–¥–µ–Ω–Ω–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
          timestamp: new Date(),
          type: "general",
        },
      ]);
    }
  };

  const handleCreateTask = async () => {
    if (!taskForm.name.trim()) return;

    try {
      await axiosInstance.post("/tasks", {
        name: taskForm.name,
        date: taskForm.date,
      });

      setShowTaskForm(false);
      setTaskForm({ name: "", date: new Date().toISOString().split("T")[0] });

      setMessages((prev) => [
        ...prev,
        {
          content: `‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è "${taskForm.name}" —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!`,
          timestamp: new Date(),
          type: "general",
        },
      ]);

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      fetchUserContext();
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è:", error);
      setMessages((prev) => [
        ...prev,
        {
          content: "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
          timestamp: new Date(),
          type: "general",
        },
      ]);
    }
  };

  const handleGenerateInsights = async () => {
    if (!geminiService.current) return;

    setIsLoading(true);
    try {
      const response = await geminiService.current.analyzeJournalInsights();
      setMessages((prev) => [...prev, response]);
      setActiveTab("insights");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω—Å–∞–π—Ç—ñ–≤:", error);
      const fallbackResponse = {
        content:
          "üìä –î–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∞—à–∏—Ö —ñ–Ω—Å–∞–π—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –∑–∞–ø–∏—Å—ñ–≤ —É —â–æ–¥–µ–Ω–Ω–∏–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –≤–∞—à—ñ –≤—ñ–¥—á—É—Ç—Ç—è —Ç–∞ –µ–º–æ—Ü—ñ—ó, –∞ –ø–æ—Ç—ñ–º –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è —Å—é–¥–∏!",
        timestamp: new Date(),
        type: "insight" as const,
        suggestions: [
          "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å —É —â–æ–¥–µ–Ω–Ω–∏–∫",
          "–†–æ–∑–∫–∞–∂–∏ –ø—Ä–æ –µ–º–æ—Ü—ñ–π–Ω–µ –∑–¥–æ—Ä–æ–≤'—è",
        ],
      };
      setMessages((prev) => [...prev, fallbackResponse]);
      setActiveTab("insights");
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateReminders = async () => {
    if (!geminiService.current) return;

    setIsLoading(true);
    try {
      const response = await geminiService.current.generateDailyReminders();
      setMessages((prev) => [...prev, response]);
      setActiveTab("reminders");
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:", error);
      const fallbackResponse = {
        content:
          "üå∏ –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n\n‚Ä¢ –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø–∏—Ç–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–æ–¥–∏\n‚Ä¢ –ü—Ä–∏–¥—ñ–ª—ñ—Ç—å 15 —Ö–≤–∏–ª–∏–Ω –ª–µ–≥–∫–∏–º –≤–ø—Ä–∞–≤–∞–º\n‚Ä¢ –ó'—ó–∂—Ç–µ –ø–æ—Ä—Ü—ñ—é —Å–≤—ñ–∂–∏—Ö —Ñ—Ä—É–∫—Ç—ñ–≤\n‚Ä¢ –ó—Ä–æ–±—ñ—Ç—å –¥–∏—Ö–∞–ª—å–Ω—ñ –≤–ø—Ä–∞–≤–∏ –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó\n\n–ü–∞–º'—è—Ç–∞–π—Ç–µ: –∫–æ–∂–µ–Ω –¥–µ–Ω—å - —Ü–µ –∫—Ä–æ–∫ –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ –∑ –º–∞–ª—é–∫–æ–º!",
        timestamp: new Date(),
        type: "reminder" as const,
      };
      setMessages((prev) => [...prev, fallbackResponse]);
      setActiveTab("reminders");
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickReply = (suggestion: string) => {
    setUserInput(suggestion);
    setTimeout(() => {
      const button = document.querySelector(
        `.${styles.sendButton}`
      ) as HTMLButtonElement;
      button?.click();
    }, 100);
  };

  const renderMessageIcon = (type: AIResponse["type"]) => {
    switch (type) {
      case "advice":
        return "üí°";
      case "reminder":
        return "‚è∞";
      case "insight":
        return "üìä";
      case "motivation":
        return "‚ú®";
      case "general":
        return "üí¨";
      default:
        return "üí¨";
    }
  };

  const renderTabContent = () => {
    if (activeTab === "diary") {
      return (
        <div className={styles.messagesArea}>
          <div className={styles.emptyState}>
            <p>üìñ –©–æ–¥–µ–Ω–Ω–∏–∫ –≤–∞–≥—ñ—Ç–Ω–æ—Å—Ç—ñ</p>
            <p>–ó–∞–ø–∏—Å—É–π—Ç–µ —Å–≤–æ—ó –≤—ñ–¥—á—É—Ç—Ç—è, –µ–º–æ—Ü—ñ—ó —Ç–∞ –≤–∞–∂–ª–∏–≤—ñ –º–æ–º–µ–Ω—Ç–∏</p>
            <button
              className={styles.quickReplyButton}
              onClick={() => setShowDiaryForm(true)}
              style={{ marginTop: "16px" }}
            >
              <RiAddLine /> –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
            </button>
          </div>
        </div>
      );
    }

    if (activeTab === "tasks") {
      return (
        <div className={styles.messagesArea}>
          <div className={styles.emptyState}>
            <p>üìã –ó–∞–≤–¥–∞–Ω–Ω—è</p>
            <p>–ü–ª–∞–Ω—É–π—Ç–µ —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–π—Ç–µ –≤–∞–∂–ª–∏–≤—ñ —Å–ø—Ä–∞–≤–∏</p>
            <button
              className={styles.quickReplyButton}
              onClick={() => setShowTaskForm(true)}
              style={{ marginTop: "16px" }}
            >
              <RiAddLine /> –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
            </button>
          </div>
        </div>
      );
    }

    return null;
  };

  if (!GEMINI_API_KEY) {
    return null;
  }

  return (
    <>
      <button
        className={styles.floatingButton}
        onClick={() => setIsOpen(true)}
        aria-label="–í—ñ–¥–∫—Ä–∏—Ç–∏ AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞"
      >
        <span className={styles.buttonIcon}>
          <RiAiGenerate />
        </span>
        <span className={styles.buttonText}>AI –ü–æ–º—ñ—á–Ω–∏–∫</span>
      </button>

      {isOpen && (
        <div className={styles.modal}>
          <div className={styles.modalContent}>
            <div className={styles.header}>
              <h2 className={styles.title}>
                {isAuthenticated
                  ? `AI –ü–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è ${user?.name || "–º–∞–π–±—É—Ç–Ω—å–æ—ó –º–∞–º–∏"}`
                  : "AI –ü–æ–º—ñ—á–Ω–∏–∫ –∑ –ø–∏—Ç–∞–Ω—å –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞"}
              </h2>
              <button
                className={styles.closeButton}
                onClick={() => setIsOpen(false)}
                aria-label="–ó–∞–∫—Ä–∏—Ç–∏"
              >
                <RiCloseLine />
              </button>
            </div>

            <div className={styles.tabs}>
              <button
                className={`${styles.tab} ${activeTab === "chat" ? styles.activeTab : ""}`}
                onClick={() => setActiveTab("chat")}
              >
                –ß–∞—Ç
              </button>
              <button
                className={`${styles.tab} ${activeTab === "insights" ? styles.activeTab : ""}`}
                onClick={handleGenerateInsights}
              >
                –Ü–Ω—Å–∞–π—Ç–∏
              </button>
              <button
                className={`${styles.tab} ${activeTab === "reminders" ? styles.activeTab : ""}`}
                onClick={handleGenerateReminders}
              >
                –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
              </button>
              {isAuthenticated && (
                <>
                  <button
                    className={`${styles.tab} ${activeTab === "diary" ? styles.activeTab : ""}`}
                    onClick={() => setActiveTab("diary")}
                  >
                    –©–æ–¥–µ–Ω–Ω–∏–∫
                  </button>
                  <button
                    className={`${styles.tab} ${activeTab === "tasks" ? styles.activeTab : ""}`}
                    onClick={() => setActiveTab("tasks")}
                  >
                    –ó–∞–≤–¥–∞–Ω–Ω—è
                  </button>
                </>
              )}
            </div>

            {(activeTab === "diary" || activeTab === "tasks") &&
            isAuthenticated ? (
              renderTabContent()
            ) : (
              <div className={styles.messagesArea}>
                {messages.length === 0 && !isLoading && (
                  <div className={styles.emptyState}>
                    <p>–ü—Ä–∏–≤—ñ—Ç! {user?.name}</p>
                    <p>–Ø –≤–∞—à AI-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –ø–∏—Ç–∞–Ω—å –≤–∞–≥—ñ—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞.</p>
                    <p>–°—Ç–∞–≤—Ç–µ –±—É–¥—å-—è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è!</p>
                  </div>
                )}

                {messages.map((message, index) => (
                  <div key={index} className={styles.message}>
                    <div className={styles.messageHeader}>
                      <span className={styles.messageIcon}>
                        {renderMessageIcon(message.type)}
                      </span>
                      <span className={styles.messageTime}>
                        {new Date(message.timestamp).toLocaleTimeString(
                          "uk-UA",
                          {
                            hour: "2-digit",
                            minute: "2-digit",
                          }
                        )}
                      </span>
                    </div>
                    <div className={styles.messageContent}>
                      {message.content}
                    </div>
                    {message.suggestions && message.suggestions.length > 0 && (
                      <div className={styles.suggestions}>
                        {activeTab === "chat" ? (
                          <div className={styles.quickReplies}>
                            {message.suggestions
                              .slice(0, 3)
                              .map((suggestion, idx) => (
                                <button
                                  key={idx}
                                  className={styles.quickReplyButton}
                                  onClick={() => handleQuickReply(suggestion)}
                                >
                                  {suggestion}
                                </button>
                              ))}
                          </div>
                        ) : (
                          message.suggestions.map((suggestion, idx) => (
                            <div key={idx} className={styles.suggestion}>
                              {suggestion}
                            </div>
                          ))
                        )}
                      </div>
                    )}
                    {message.relatedTopics &&
                      message.relatedTopics.length > 0 && (
                        <div className={styles.relatedTopics}>
                          <span className={styles.topicsLabel}>
                            –°—Ö–æ–∂—ñ —Ç–µ–º–∏:
                          </span>
                          {message.relatedTopics.map((topic, idx) => (
                            <span key={idx} className={styles.topicChip}>
                              {topic}
                            </span>
                          ))}
                        </div>
                      )}
                  </div>
                ))}

                {isLoading && (
                  <div className={styles.loadingMessage}>
                    <div className={styles.typingIndicator}>
                      <span></span>
                      <span></span>
                      <span></span>
                    </div>
                    <span>AI –¥—É–º–∞—î...</span>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>
            )}

            {activeTab === "chat" && (
              <div className={styles.inputArea}>
                <input
                  type="text"
                  className={styles.input}
                  placeholder={
                    isAuthenticated
                      ? "–ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≤–∞—à—É –≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å..."
                      : "–ó–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –≤–∞–≥—ñ—Ç–Ω—ñ—Å—Ç—å –∞–±–æ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ..."
                  }
                  value={userInput}
                  onChange={(e) => setUserInput(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                  disabled={isLoading}
                />
                <button
                  className={styles.sendButton}
                  onClick={handleSendMessage}
                  disabled={isLoading || !userInput.trim()}
                >
                  –ù–∞–¥—ñ—Å–ª–∞—Ç–∏
                </button>
              </div>
            )}

            {!isAuthenticated && activeTab === "chat" && (
              <div className={styles.guestHint}>
                –£–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ—Ä–∞–¥
              </div>
            )}
          </div>
        </div>
      )}

      {/* Diary Form Modal */}
      {showDiaryForm && (
        <div className={styles.modal}>
          <div
            className={styles.modalContent}
            style={{ maxWidth: "500px", height: "auto" }}
          >
            <div className={styles.header}>
              <h2 className={styles.title}>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å —É —â–æ–¥–µ–Ω–Ω–∏–∫—É</h2>
              <button
                className={styles.closeButton}
                onClick={() => setShowDiaryForm(false)}
              >
                <RiCloseLine />
              </button>
            </div>
            <div style={{ padding: "20px" }}>
              <div style={{ marginBottom: "16px" }}>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontWeight: "600",
                  }}
                >
                  –ó–∞–≥–æ–ª–æ–≤–æ–∫:
                </label>
                <input
                  type="text"
                  className={styles.input}
                  value={diaryForm.title}
                  onChange={(e) =>
                    setDiaryForm({ ...diaryForm, title: e.target.value })
                  }
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø–∏—Å—É"
                />
              </div>
              <div style={{ marginBottom: "16px" }}>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontWeight: "600",
                  }}
                >
                  –û–ø–∏—Å:
                </label>
                <textarea
                  className={styles.input}
                  value={diaryForm.description}
                  onChange={(e) =>
                    setDiaryForm({ ...diaryForm, description: e.target.value })
                  }
                  placeholder="–û–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ –≤—ñ–¥—á—É—Ç—Ç—è, –¥—É–º–∫–∏ –∞–±–æ –ø–æ–¥—ñ—ó –¥–Ω—è..."
                  rows={4}
                  style={{ resize: "vertical", minHeight: "100px" }}
                />
              </div>
              <div style={{ marginBottom: "20px" }}>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontWeight: "600",
                  }}
                >
                  –ï–º–æ—Ü—ñ—ó:
                </label>
                <div style={{ display: "flex", flexWrap: "wrap", gap: "8px" }}>
                  {emotions.map((emotion) => (
                    <button
                      key={emotion._id}
                      className={`${styles.quickReplyButton} ${
                        diaryForm.emotions.includes(emotion._id)
                          ? styles.activeTab
                          : ""
                      }`}
                      onClick={() => {
                        const newEmotions = diaryForm.emotions.includes(
                          emotion._id
                        )
                          ? diaryForm.emotions.filter(
                              (id) => id !== emotion._id
                            )
                          : [...diaryForm.emotions, emotion._id];
                        setDiaryForm({ ...diaryForm, emotions: newEmotions });
                      }}
                      style={{ fontSize: "12px" }}
                    >
                      {emotion.name}
                    </button>
                  ))}
                </div>
              </div>
              <div style={{ display: "flex", gap: "12px" }}>
                <button
                  className={styles.sendButton}
                  onClick={handleCreateDiaryEntry}
                  disabled={
                    !diaryForm.title.trim() || !diaryForm.description.trim()
                  }
                >
                  –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å
                </button>
                <button
                  className={styles.quickReplyButton}
                  onClick={() => setShowDiaryForm(false)}
                >
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Task Form Modal */}
      {showTaskForm && (
        <div className={styles.modal}>
          <div
            className={styles.modalContent}
            style={{ maxWidth: "400px", height: "auto" }}
          >
            <div className={styles.header}>
              <h2 className={styles.title}>–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è</h2>
              <button
                className={styles.closeButton}
                onClick={() => setShowTaskForm(false)}
              >
                <RiCloseLine />
              </button>
            </div>
            <div style={{ padding: "20px" }}>
              <div style={{ marginBottom: "16px" }}>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontWeight: "600",
                  }}
                >
                  –ù–∞–∑–≤–∞ –∑–∞–≤–¥–∞–Ω–Ω—è:
                </label>
                <input
                  type="text"
                  className={styles.input}
                  value={taskForm.name}
                  onChange={(e) =>
                    setTaskForm({ ...taskForm, name: e.target.value })
                  }
                  placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–≤–¥–∞–Ω–Ω—è"
                />
              </div>
              <div style={{ marginBottom: "20px" }}>
                <label
                  style={{
                    display: "block",
                    marginBottom: "8px",
                    fontWeight: "600",
                  }}
                >
                  –î–∞—Ç–∞:
                </label>
                <input
                  type="date"
                  className={styles.input}
                  value={taskForm.date}
                  onChange={(e) =>
                    setTaskForm({ ...taskForm, date: e.target.value })
                  }
                />
              </div>
              <div style={{ display: "flex", gap: "12px" }}>
                <button
                  className={styles.sendButton}
                  onClick={handleCreateTask}
                  disabled={!taskForm.name.trim()}
                >
                  –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
                </button>
                <button
                  className={styles.quickReplyButton}
                  onClick={() => setShowTaskForm(false)}
                >
                  –°–∫–∞—Å—É–≤–∞—Ç–∏
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};
